name: Scheduled Tasks (Windows) - PKT timezone

# Triggers:
# - Daily at 02:00 PKT (Pakistan, UTC+5)  => UTC: previous day 21:00 -> cron '0 21 * * *'
# - Weekly on Sunday at 04:00 PKT         => UTC: Saturday 23:00        -> cron '0 23 * * 6'
# - Manual run supported via workflow_dispatch
on:
  schedule:
    - cron: '0 21 * * *'   # daily at 02:00 PKT
    - cron: '0 23 * * 6'   # weekly Sunday at 04:00 PKT
  workflow_dispatch: {}

jobs:
  scheduled-maintenance-windows:
    runs-on: windows-latest
    timeout-minutes: 90
    env:
      # Optional: expose commonly used secrets here
      # BACKUP_S3_BUCKET: ${{ secrets.BACKUP_S3_BUCKET }}
      # DB_CONN: ${{ secrets.DB_CONN }}
      TZ: 'Asia/Karachi'   # informational only; GitHub cron is UTC

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js (optional)
        if: always()
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies (if package.json exists)
        shell: powershell
        run: |
          if (Test-Path -Path "package.json") {
            Write-Host "package.json found — installing dependencies (npm ci)..."
            npm ci
          } else {
            Write-Host "No package.json found — skipping npm install"
          }

      - name: Run tests (if configured)
        shell: powershell
        run: |
          if (Test-Path -Path "package.json") {
            # run tests if script exists in package.json
            $pkg = Get-Content package.json -Raw | ConvertFrom-Json
            if ($pkg.scripts -and $pkg.scripts.test) {
              Write-Host "Running npm test..."
              npm test
            } else {
              Write-Host "No test script defined in package.json — skipping tests"
            }
          } else {
            Write-Host "No package.json — skipping tests"
          }

      - name: Prepare logs folder
        shell: powershell
        run: |
          $logsDir = "$PSScriptRoot\logs"
          if (-not (Test-Path -Path $logsDir)) { New-Item -ItemType Directory -Path $logsDir | Out-Null }
          "$((Get-Date).ToUniversalTime().ToString('u')) - Scheduled run started (PKT)" | Out-File -FilePath "$logsDir\scheduled-run.log" -Encoding utf8 -Append

      - name: Run Windows maintenance script (scripts/maintenance.ps1)
        id: run_maintenance
        shell: powershell
        run: |
          $logsDir = "$PSScriptRoot\logs"
          $logFile = "$logsDir\scheduled-run.log"
          if (Test-Path -Path ".\scripts\maintenance.ps1") {
            Write-Host "Found scripts\maintenance.ps1 — executing..."
            try {
              & powershell -NoProfile -ExecutionPolicy Bypass -File ".\scripts\maintenance.ps1" *>> $logFile
              Write-Host "Maintenance script completed."
            } catch {
              Write-Host "Maintenance script failed: $_"
              throw $_
            }
          } else {
            Write-Host "No scripts\maintenance.ps1 found — running placeholder tasks..."
            "### Placeholder tasks output" | Out-File -FilePath $logFile -Append
            Write-Host "Listing repository root" | Out-File -FilePath $logFile -Append
            Get-ChildItem -Force | Out-File -FilePath $logFile -Append
            Write-Host "Disk usage (Get-PSDrive)" | Out-File -FilePath $logFile -Append
            Get-PSDrive | Out-File -FilePath $logFile -Append
          }
          "$((Get-Date).ToUniversalTime().ToString('u')) - Scheduled run finished (PKT)" | Out-File -FilePath $logFile -Append

      - name: Upload logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scheduled-logs-${{ github.run_id }}
          path: logs

      - name: Notify Slack on success (optional)
        if: ${{ success() && secrets.SLACK_WEBHOOK }}
        shell: powershell
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          $repo = "${{ github.repository }}"
          $runNum = "${{ github.run_number }}"
          $runUrl = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          $payload = @{
            text = ":white_check_mark: Scheduled job completed"
            attachments = @(
              @{
                color = "good"
                fields = @(
                  @{ title = "Repository"; value = $repo; short = $true },
                  @{ title = "Run"; value = $runNum; short = $true },
                  @{ title = "Run URL"; value = $runUrl; short = $false }
                )
              }
            )
          } | ConvertTo-Json -Depth 6
          Invoke-RestMethod -Uri $env:SLACK_WEBHOOK -Method Post -ContentType 'application/json' -Body $payload

      - name: Create GitHub Issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `Scheduled task failed: ${process.env.GITHUB_REPOSITORY} (run #${process.env.GITHUB_RUN_NUMBER})`;
            const body = `A scheduled run failed. View run logs: ${process.env.GITHUB_RUN_URL}\n\nArtifacts: scheduled-logs-${process.env.GITHUB_RUN_ID}`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body
            })
