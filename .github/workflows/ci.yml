name: CI (Windows)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test-and-lint-windows:
    name: Test, Lint & Coverage (Windows)
    runs-on: windows-latest
    timeout-minutes: 30
    env:
      # Replace this with your top-level package/module name for accurate coverage, or leave as '.' to cover repository files
      PACKAGE_NAME: "your_package"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path -Path "requirements.txt") {
            pip install -r requirements.txt
          } else {
            Write-Host "No requirements.txt found"
          }
          # Ensure test & lint tooling exists
          pip install --upgrade pytest pytest-cov flake8 bandit

          # If repo is a package, install editable to make it importable by tests
          if (Test-Path -Path "setup.py" -PathType Leaf -or Test-Path -Path "pyproject.toml") {
            Write-Host "Installing project in editable mode (pip install -e .)"
            pip install -e . || Write-Host "Editable install failed or not a package; continuing"
          }

      - name: Lint (flake8)
        shell: pwsh
        run: |
          if (Get-Command flake8 -ErrorAction SilentlyContinue) {
            Write-Host "Running flake8..."
            flake8
          } else {
            Write-Host "flake8 not found; installing..."
            pip install flake8
            flake8
          }

      - name: Security scan (bandit)
        shell: pwsh
        run: |
          if (Get-Command bandit -ErrorAction SilentlyContinue) {
            Write-Host "Running bandit..."
          } else {
            Write-Host "bandit not found; installing..."
            pip install bandit
          }
          New-Item -ItemType Directory -Path reports -Force | Out-Null
          # Allow non-zero bandit exit but keep output
          bandit -r . -f json -o reports\bandit.json || Write-Host "Bandit completed with exit code $LASTEXITCODE"

      - name: Pytest collect-only (debug) and fail if no tests found
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path reports -Force | Out-Null

          Write-Host "Running pytest --collect-only to see which tests are discovered..."
          # Capture pytest collect-only output
          $collectOutput = pytest --collect-only -q 2>&1
          $collectOutput | Out-File -FilePath reports\pytest-collect.txt -Encoding utf8

          # Count non-empty lines from collect-only output. Usually each test/nodeid appears on its own line.
          $lines = $collectOutput -split "`n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne "" }
          $count = $lines.Count
          Write-Host "pytest collect-only lines (approx. discovered items): $count"
          if ($count -eq 0) {
            Write-Error "No tests were discovered by pytest. See reports\pytest-collect.txt for details. Failing the job."
            exit 1
          } else {
            Write-Host "Detected $count collected item(s). Proceeding to run tests."
          }

      - name: Run tests (pytest) and collect coverage
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path reports -Force | Out-Null

          # Use PACKAGE_NAME env var for coverage; default to ./ if left unchanged
          $covTarget = if ($env:PACKAGE_NAME -and $env:PACKAGE_NAME -ne "your_package") { $env:PACKAGE_NAME } else { "./" }
          Write-Host "Running pytest and collecting coverage for: $covTarget"

          # Run pytest and generate junit + coverage xml. If pytest returns non-zero, the step will fail (intended).
          pytest --junitxml=reports\junit.xml --cov=$covTarget --cov-report=xml:reports\coverage.xml

      - name: Upload reports (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-reports-windows
          path: reports/
